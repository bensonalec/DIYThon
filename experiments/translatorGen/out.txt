from std import Parser
from tokenize import NUMBER,OP,NAME,NEWLINE

from memo import memoize_left_rec

class start:
    def __init__(self, _a):
        self._a = _a
        
    def translate(self):
        return f"{_a}"
            
class state:
    def __init__(self, _a):
        self._a = _a
        
    def translate(self):
        return f"{_a}"
            
class statement:
    def __init__(self, _a):
        self._a = _a
        
    def translate(self):
        return f"{_a}"
            
class expr:
    def __init__(self, _a, _b, _c):
        self._a = _a
	self._b = _b
	self._c = _c
        
    def translate(self):
        return f"{_a}{_b}{_c}"
            
class term:
    def __init__(self, _a):
        self._a = _a
        
    def translate(self):
        return f"{_a}"
            
class atom:
    def __init__(self, _a):
        self._a = _a
        
    def translate(self):
        return f"{'('}{_a}{')'}"
            
class assignment:
    def __init__(self, _a, _b):
        self._a = _a
	self._b = _b
        
    def translate(self):
        return f"{_a}{'='}{_b}"
            
class target:
    def __init__(self, _a):
        self._a = _a
        
    def translate(self):
        return f"{_a}"
            
class if_statement:
    def __init__(self, _a, _b):
        self._a = _a
	self._b = _b
        
    def translate(self):
        return f"{'if'}{_a}{':'}{_b}"
            class NewParser(Parser):

    @memoize_left_rec
    def start(self):
        
        pos = self.mark()
        if((n0 := self.start()) and (n1 := self.state())):
            return [('start', n0), ('state', n1)]
        self.reset(pos)
            
        pos = self.mark()
        if((n2 := self.state())):
            return [('state', n2)]
        self.reset(pos)
            
        return None
            
    @memoize_left_rec
    def state(self):
        
        pos = self.mark()
        if((n3 := self.statement()) and (n4 := self.expect(NEWLINE))):
            return [('statement', n3), ('NEWLINE', n4)]
        self.reset(pos)
            
        return None
            
    @memoize_left_rec
    def statement(self):
        
        pos = self.mark()
        if((n5 := self.assignment())):
            return [('assignment', n5)]
        self.reset(pos)
            
        pos = self.mark()
        if((n6 := self.expr())):
            return [('expr', n6)]
        self.reset(pos)
            
        pos = self.mark()
        if((n7 := self.if_statement())):
            return [('if_statement', n7)]
        self.reset(pos)
            
        return None
            
    @memoize_left_rec
    def expr(self):
        
        pos = self.mark()
        if((n8 := self.expr()) and (n9 := self.expect(OP)) and (n10 := self.term())):
            return [('expr', n8), ('OP', n9), ('term', n10)]
        self.reset(pos)
            
        pos = self.mark()
        if((n11 := self.term())):
            return [('term', n11)]
        self.reset(pos)
            
        return None
            
    @memoize_left_rec
    def term(self):
        
        pos = self.mark()
        if((n12 := self.atom())):
            return [('atom', n12)]
        self.reset(pos)
            
        return None
            
    @memoize_left_rec
    def atom(self):
        
        pos = self.mark()
        if((n13 := self.expect(NAME))):
            return [('NAME', n13)]
        self.reset(pos)
            
        pos = self.mark()
        if((n14 := self.expect(NUMBER))):
            return [('NUMBER', n14)]
        self.reset(pos)
            
        pos = self.mark()
        if(self.expect('(') and (n16 := self.expr()) and self.expect(')')):
            return [('expr', n16)]
        self.reset(pos)
            
        return None
            
    @memoize_left_rec
    def assignment(self):
        
        pos = self.mark()
        if((n18 := self.target()) and self.expect('=') and (n20 := self.expr())):
            return [('target', n18), ('expr', n20)]
        self.reset(pos)
            
        return None
            
    @memoize_left_rec
    def target(self):
        
        pos = self.mark()
        if((n21 := self.expect(NAME))):
            return [('NAME', n21)]
        self.reset(pos)
            
        return None
            
    @memoize_left_rec
    def if_statement(self):
        
        pos = self.mark()
        if(self.expect('if') and (n23 := self.expr()) and self.expect(':') and (n25 := self.statement())):
            return [('expr', n23), ('statement', n25)]
        self.reset(pos)
            
        return None
            
